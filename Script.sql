-- SCHEMA: dawa

-- DROP SCHEMA IF EXISTS "dawa" ;

CREATE SCHEMA IF NOT EXISTS "dawa"
    AUTHORIZATION postgres;

CREATE TABLE dawa.DATOS (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  CEDULA VARCHAR(15) NOT NULL,
  NOMBRE VARCHAR(50) NOT NULL,
  APELLIDO VARCHAR(50) NOT NULL,
  EMAIL VARCHAR(50) NOT NULL,
  FEC_NAC TIMESTAMP NOT NULL,
  ROL INT NOT NULL,
  IMAGEN VARCHAR(255),
  ESTADO CHAR(1) NOT NULL DEFAULT 'A'
);

CREATE TABLE dawa.USUARIO (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  USERNAME VARCHAR(50) NOT NULL,
  CONTRASENIA VARCHAR(255) NOT NULL
);

CREATE TABLE dawa.ROL (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  DESCRIPCION VARCHAR(50) NOT NULL
);

CREATE TABLE dawa.POST (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  USER_ID INT NOT NULL,
  CONTENIDO VARCHAR(255) NOT NULL,
  FECHA_CREADO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FECHA_UPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  LIKES INT DEFAULT 0,
  COMENTARIOS INT DEFAULT 0,
  ESTADO CHAR DEFAULT 'A'
);

CREATE TABLE dawa.COMENTARIOS (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  POST_ID INT NOT NULL,
  USER_ID INT NOT NULL,
  CONTENIDO VARCHAR(255) NOT NULL,
  FECHA_CREADO TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE dawa.FRIENDS (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  USER_ID1 INT NOT NULL,
  USER_ID2 INT NOT NULL,
  FECHA_CREADO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT unique_friends UNIQUE (USER_ID1, USER_ID2)
);

CREATE TABLE dawa.NOTIFICACIONES (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  USER_ID INT NOT NULL,
  TIPO INT NOT NULL,  -- Cambiar a INTEGER
  MENSAJE VARCHAR(255) NOT NULL,
  VISTO BOOLEAN NOT NULL DEFAULT false,
  FECHA_CREADO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FECHA_UPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE dawa.TIPO_NOTIFICACION (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  DESCRIPCION VARCHAR(255) NOT NULL
);

CREATE TABLE dawa.REPORTE(
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  REPORTADO_POR_ID INT NOT NULL,
  CONTENIDO_ID INT NOT NULL,
  TIPO_CONTENIDO INT NOT NULL,
  MOTIVO VARCHAR(255) NOT NULL,
  FECHA_CREADO TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE dawa.TIPO_CONTENT (
  ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  DESCRIPCION varchar(50) NOT NULL
);

-- Foreign Key constraints
ALTER TABLE dawa.DATOS ADD FOREIGN KEY (ROL) REFERENCES dawa.ROL (ID);

ALTER TABLE dawa.USUARIO ADD FOREIGN KEY (ID) REFERENCES dawa.DATOS (ID);

ALTER TABLE dawa.POST ADD FOREIGN KEY (USER_ID) REFERENCES dawa.DATOS (ID);

ALTER TABLE dawa.COMENTARIOS ADD FOREIGN KEY (USER_ID) REFERENCES dawa.DATOS (ID);

ALTER TABLE dawa.COMENTARIOS ADD FOREIGN KEY (POST_ID) REFERENCES dawa.POST (ID);

ALTER TABLE dawa.FRIENDS ADD FOREIGN KEY (USER_ID1) REFERENCES dawa.DATOS (ID);

ALTER TABLE dawa.FRIENDS ADD FOREIGN KEY (USER_ID2) REFERENCES dawa.DATOS (ID);

ALTER TABLE dawa.NOTIFICACIONES ADD FOREIGN KEY (USER_ID) REFERENCES dawa.DATOS (ID);

ALTER TABLE dawa.NOTIFICACIONES ADD FOREIGN KEY (TIPO) REFERENCES dawa.TIPO_NOTIFICACION (ID);

ALTER TABLE dawa.REPORTE ADD FOREIGN KEY (TIPO_CONTENIDO) REFERENCES dawa.TIPO_CONTENT (ID);

ALTER TABLE dawa.REPORTE ADD FOREIGN KEY (CONTENIDO_ID) REFERENCES dawa.POST (ID);

ALTER TABLE dawa.REPORTE ADD FOREIGN KEY (REPORTADO_POR_ID) REFERENCES dawa.DATOS (ID);
